# -*- coding: utf-8 -*-
"""creating_new_dataset&EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sLmUEEI_0kO-HaSGJVGR-grtYiMuO79D

# Creating new dataset

#International Labour Organization (ILO) dataset**
"""

import numpy as np
import pandas as pd
import matplotlib as plt
import joblib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/ISO_unemployment.csv")
df

"""Drop the source and indicator columns because they are unimportant for our research."""

df.drop(['source.label','indicator.label'],axis=1, inplace=True)
df

"""Rename ILO dataset columns to more usual columns names."""

df.rename(columns={'ref_area.label': 'Country','sex.label':'Sex','classif1.label':'Age','time':'Year','obs_value':'Rate'}, inplace=True)
df

"""The age and sex column contains data in an inappropriate format, so we need to delete the information before the semicolon and keep only the numbers."""

df['Age'] = df['Age'].apply(lambda x: x.split(': ')[-1] if isinstance(x, str) else x)
df['Sex'] = df['Sex'].apply(lambda x: x.split(': ')[-1] if isinstance(x, str) else x)
df

df.info()

"""#Country-Continent dataset

**We need to add continent column for that we use kaggle dataset "Countries by Continent"**
"""

countries_continent= pd.read_csv("/content/drive/MyDrive/continents.csv")
countries_continent

"""We are only interested in the Entity and Continent columns, so we don't need the Code and Year columns."""

countries_continent.drop(["Code", "Year"], axis=1, inplace=True)
countries_continent

countries_continent.rename(columns={"Entity":"Country"}, inplace=True)

print(countries_continent.columns)

"""# Global Unemployment Rate Dataset"""

global_dataset = pd.read_csv("/content/drive/MyDrive/global_unemployment_data.csv")
global_dataset

"""The indicator_name column doesn't provide useful information, as it is the same for all data samples. Therefore, it can be removed."""

global_dataset.drop(["indicator_name"],axis=1,inplace=True)

"""Rename the column names to more basic and clear names."""

global_dataset.rename(columns={'country_name': 'Country','sex':'Sex','age_group':'Age'}, inplace=True)
global_dataset

"""##Add total option to sex column

Now we need to add information about 'Total Sex' to the Global Unemployment Dataset, but we should only select records where the age is not '15+'. In the original dataset, we don't have this category, and we consider '15+' as adults, so it doesn't need to be included here.
"""

df_total = df[(df['Sex'] == 'Total') & (df['Age'] != '15+') & (df['Year']>=2014) ].copy()
df_total

pivot_df = df_total.pivot(index=['Country', 'Sex', 'Age'], columns='Year', values='Rate')
pivot_df = pivot_df.reset_index()
pivot_df

"""We reshaped df_total by creating a pivot table that organizes unemployment rates (Rate) by country, sex, and age for each year. It then resets the index to convert it back to regular columns, resulting in a more structured DataFrame (pivot_df)."""

age_categories_map = {
    '15-24': 'Youth',
    '25+': 'Adults',
    'Under 15': 'Children',
}

pivot_df['age_categories'] = pivot_df['Age'].map(age_categories_map)
pivot_df

"""We needed to create a dictionary called age_categories_map that categorizes age groups into 'Youth', 'Adults', and 'Children'. It then adds a new column, age_categories, to pivot_df by mapping the values in the 'Age' column to their corresponding categories based on the dictionary

The order is different from the initial dataset, so we will change it.
"""

pivot_df.columns = pivot_df.columns.map(str)
pivot_df['2024'] = np.nan
order = ['Country', 'Sex', 'Age', 'age_categories',
                    '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023','2024']
df_total_updated = pivot_df[order]

df_total_updated

"""Finally, we can combine the dataset with Female/Male and the dataset with Total Sex."""

global_dataset = pd.concat([global_dataset, df_total_updated], ignore_index=True)
global_dataset = global_dataset[order]
global_dataset

"""##Merge Global Unemployment Dataset with Country-Continents dataset

As we can see, we have our combined dataset, and we need to add a new column 'Continent' using the Kaggle dataset 'Country-Continents' that was imported earlier. However, we need to check for differences in the country names before proceeding.
"""

unique_df1 = set(global_dataset['Country'].unique())
unique_df2 = set(countries_continent['Country'].unique())
countries_in_df1_not = unique_df1 - unique_df2

print("Країни в df1, але немає в df2:")
print(np.array(list(countries_in_df1_not)))

"""This occurred due to different interpretations of country names, so we need to standardize the names to a single format in order to accurately determine the corresponding continent. So we rename some countries."""

global_dataset['Country'].replace('Bolivia (Plurinational State of)', 'Bolivia', inplace=True)
global_dataset['Country'].replace('Brunei Darussalam', 'Brunei', inplace=True)
global_dataset['Country'].replace("Côte d'Ivoire", "Cote d'Ivoire", inplace=True)
global_dataset['Country'].replace('Congo, Democratic Republic of the', 'Democratic Republic of Congo', inplace=True)
global_dataset['Country'].replace('Republic of Moldova', 'Moldova', inplace=True)
global_dataset['Country'].replace('Moldova, Republic of', 'Moldova', inplace=True)
global_dataset['Country'].replace('Venezuela (Bolivarian Republic of)', 'Venezuela', inplace=True)
global_dataset['Country'].replace('Venezuela, Bolivarian Republic of', 'Venezuela', inplace=True)
global_dataset['Country'].replace('Tanzania, United Republic of', 'Tanzania', inplace=True)
global_dataset['Country'].replace('Iran (Islamic Republic of)', 'Iran', inplace=True)
global_dataset['Country'].replace('Iran, Islamic Republic of', 'Iran', inplace=True)
global_dataset['Country'].replace('Viet Nam', 'Republic of Vietnam', inplace=True)
global_dataset['Country'].replace("Korea, Republic of", 'North Korea', inplace=True)
global_dataset['Country'].replace("Republic of Korea", 'South Korea', inplace=True)
global_dataset['Country'].replace("Korea, Democratic People's Republic of", 'South Korea', inplace=True)
global_dataset['Country'].replace('United States of America', 'United States', inplace=True)
global_dataset['Country'].replace('Syrian Arab Republic', 'Syria', inplace=True)
global_dataset['Country'].replace('Curaçao', 'Curacao', inplace=True)
global_dataset['Country'].replace('Türkiye', 'Turkey', inplace=True)
global_dataset['Country'].replace('Taiwan, China', 'Taiwan', inplace=True)
global_dataset['Country'].replace('United Kingdom of Great Britain and Northern Ireland', 'United Kingdom', inplace=True)
global_dataset['Country'].replace('Hong Kong, China','Hong Kong',inplace=True)
global_dataset['Country'].replace('Occupied Palestinian Territory','Palestine',inplace = True)
global_dataset['Country'].replace('Palestinian Territories','Palestine',inplace = True)
global_dataset['Country'].replace('Timor-Leste','East Timor',inplace = True)
global_dataset['Country'].replace('Ivory Coast',"Cote d'Ivoire",inplace = True)
global_dataset['Country'].replace("Lao People's Democratic Republic","Laos",inplace = True)
global_dataset['Country'].replace("Falkland Islands, Malvinas","Falkland Islands",inplace = True)

"""Now that the same countries are present in both the global_dataset and countries_continent datasets, we can verify them once more to ensure consistency."""

unique_df1 = set(global_dataset['Country'].unique())
unique_df2 = set(countries_continent['Country'].unique())
countries_in_df1_not = unique_df1 - unique_df2

print("Країни в df1, але немає в df2:")
print(np.array(list(countries_in_df1_not)))

"""As we can see, there are still some differences, but the remaining territories are not countries. Therefore, we can delete them since we are analyzing the unemployment rate for countries, not for islands or other territories."""

is_not_a_country = [
 'Macau, China' ,'Macao, China','Russian Federation' ,'South America','Belarus','Micronesia (Federated States of)','Réunion']

global_dataset = global_dataset[~global_dataset['Country'].isin(is_not_a_country)]

"""All countries now have the correct continent assigned, and the other territories have been deleted from the dataset.

As we noticed, the continent for Cabo Verde was not defined, so we manually added this to the countries and continents dataset.
"""

new_row = pd.DataFrame({'Country': ['Cabo Verde'], 'Continent': ['Africa']})
countries_continent = pd.concat([countries_continent, new_row], ignore_index=True)

"""We need to merge df_updated with countries_continent to obtain the Continent column, assigning the appropriate continent to each country."""

new = pd.merge(global_dataset, countries_continent, on='Country', how='left')
new

"""We can check if all countries have continents."""

new.isnull().sum()

"""All countries have continents, so the merging was successful.

We want to sort our dataset by country name.
"""

sorted_df = new.sort_values(by='Country')

sorted_df

"""Our final dataset is ready.

# EDA

##Data Processing and Cleaning

Analyzing missing values
"""

sorted_df.isnull().sum()

"""Percentage table of sorted_df"""

percent_missing = sorted_df.isnull().sum() * 100 / len(sorted_df)
missing_table = pd.DataFrame({'column_name': sorted_df.columns,
                              'percent_missing': percent_missing})

missing_table

import matplotlib.pyplot as plt
import seaborn as sns

numeric = sorted_df.select_dtypes(include=['number']).columns.tolist()
a = sorted_df[numeric]
plt.figure(figsize=(10,6))
sns.heatmap(a.isnull(), cbar=False, cmap='viridis')
plt.title('Пропущені значення у наборі даних')
plt.show()

sorted_df.isnull().sum()

numeric = sorted_df.select_dtypes(include=['number']).columns.tolist()

grouped_data = sorted_df.groupby('Country')[numeric].apply(lambda x: x.isnull().any())

plt.figure(figsize=(40, 10))

sns.heatmap(grouped_data.T, cbar=False, cmap='viridis', xticklabels=grouped_data.index)

plt.ylabel('Змінні')
plt.xlabel('Країни')

plt.title('Пропущені значення у наборі даних (групування по країні)')
plt.show()

sorted_df.describe()

"""Fill nans in mean by country"""

def fill_na_by_country_mean(df, year_cols):
    for year in year_cols:
        df[year] = df.groupby('Country')[year].transform(lambda x: x.fillna(x.mean()))
    return df

year_cols = ['2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024']
df_filled = fill_na_by_country_mean(sorted_df, year_cols)

df_filled

ukraine_data = df_filled[df_filled['Country'] == 'Ukraine']

# Екстраполяція
years = ['2022', '2023', '2024']
for year in years:
    ukraine_data[year] = ukraine_data.loc[:, '2014':'2021'].apply(lambda x: np.polyfit(range(2014, 2022), x, 1)[0] * (int(year) - 2021) + x.mean(), axis=1)

df_filled.update(ukraine_data)

seysheles_data = df_filled[df_filled['Country'] == 'Seychelles']

# Екстраполяція
years = ['2021','2022', '2023', '2024']
for year in years:
    seysheles_data[year] = seysheles_data.loc[:, '2014':'2020'].apply(lambda x: np.polyfit(range(2014, 2021), x, 1)[0] * (int(year) - 2020) + x.mean(), axis=1)

df_filled.update(seysheles_data)

palestine_data = df_filled[df_filled['Country'] == 'Palestine']

# Екстраполяція
years = ['2023', '2024']
for year in years:
    palestine_data[year] = palestine_data.loc[:, '2014':'2022'].apply(lambda x: np.polyfit(range(2014, 2023), x, 1)[0] * (int(year) - 2022) + x.mean(), axis=1)

df_filled.update(palestine_data)

df_filled

df_filled.isnull().sum()

kosovo_data = df_filled[df_filled['Country'] == 'Kosovo']

# Екстраполяція
years = ['2023', '2024']
for year in years:
    kosovo_data[year] = kosovo_data.loc[:, '2014':'2022'].apply(lambda x: np.polyfit(range(2014, 2023), x, 1)[0] * (int(year) - 2022) + x.mean(), axis=1)

df_filled.update(kosovo_data)

df_filled

countries_to_delete = [
    'Bermuda', 'Cayman Islands', 'Cook Islands', 'Curacao', 'Falkland Islands',
    'Grenada', 'Monaco', 'Montserrat', 'Niue', 'Tokelau', 'Wallis and Futuna',
    'Tuvalu', 'San Marino', 'Palau','Kiribati','Marshall Islands','Nauru'
]

data_cleaned = df_filled[~df_filled['Country'].isin(countries_to_delete)]

data_cleaned

data_cleaned.isnull().sum()

nan_info = []
for index, row in data_cleaned.iterrows():
    for year in ['2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024']:
        if pd.isna(row[year]):
            nan_info.append((row['Country'], year))

for country, year in nan_info:
    print(f"Країна: {country}, Рік: {year} має NaN значення")

"""## Balancing"""

sns.countplot(x='Sex', data=data_cleaned)
plt.title('Розподіл за статтю')
plt.show()

years = ['2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024']
data_cleaned[years] = data_cleaned[years].apply(pd.to_numeric, errors='coerce')
df_balanced = data_cleaned.copy()

male_data = data_cleaned[data_cleaned['Sex'] == 'Male']
female_data = data_cleaned[data_cleaned['Sex'] == 'Female']

new_rows = []

for country in data_cleaned['Country'].unique():
    for age in data_cleaned['Age'].unique():
        total_row = df_balanced[(df_balanced['Country'] == country) & (df_balanced['Age'] == age) & (df_balanced['Sex'] == 'Total')]
        if total_row.empty:
            male_row = male_data[(male_data['Country'] == country) & (male_data['Age'] == age)]
            female_row = female_data[(female_data['Country'] == country) & (female_data['Age'] == age)]
            if not male_row.empty and not female_row.empty:
                new_total_row = {
                    'Country': country,
                    'Sex': 'Total',
                    'Age': age,
                    'age_categories': male_row['age_categories'].values[0],
                    'Continent': male_row['Continent'].values[0]
                }

                for year in years:
                    total_value = (male_row[year].values[0] + female_row[year].values[0])/2
                    new_total_row[year] = total_value

                new_rows.append(new_total_row)

new_rows_df = pd.DataFrame(new_rows)
df_balanced = pd.concat([df_balanced, new_rows_df], ignore_index=True)
df_balanced

sns.countplot(x='Sex', data=df_balanced)
plt.title('Розподіл за статтю')
plt.show()

df_balanced.info()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

df_balanced[years] = scaler.fit_transform(df_balanced[years])
df_balanced

"""##Data Types"""

df_balanced.nunique()

df_balanced.dtypes

df_balanced['Sex'].unique()

df_balanced['Age'].unique()

df_balanced

import matplotlib.pyplot as plt

country = "Italy"
age_category = "15-24"
sex = "Total"
continent = "Europe"

filtered_data = df_balanced[(df_balanced['Country'] == country) &
                            (df_balanced['Age'] == age_category) &
                            (df_balanced['Sex'] == sex) &
                            (df_balanced['Continent'] == continent)]

if not filtered_data.empty:
    years = filtered_data.columns[4:-1].astype(int)
    values = filtered_data.iloc[0, 4:-1].astype(float)

    plt.figure(figsize=(10, 6))
    plt.plot(years, values, marker='o', linestyle='-', color='b', label=f'{country} ({age_category})')
    plt.title(f'Unemployment Rate Over Time for {country}, Age {age_category}, Sex {sex}')
    plt.xlabel('Year')
    plt.ylabel('Unemployment Rate')
    plt.grid(True)
    plt.legend()
    plt.show()
else:
    print("No data available for the specified filter.")

df_balanced.to_csv('balanced_data.csv', index=False)

"""## Modifying the structure of our dataset"""

df_long = df_balanced.melt(
    id_vars=['Country', 'Sex', 'Age', 'age_categories', 'Continent'],
    var_name='Year',
    value_name='UnemploymentRate'
)

df_long['Year'] = df_long['Year'].astype(int)
df_long

age_categories = df_long['Age'].unique()
age_categories

df_long = df_long[df_long['Age'] != 'Under 15']
df_long

df_long.to_csv('df_long.csv', index=False)

"""## Labour Force"""

monthly_labour_force= pd.read_csv("/content/drive/MyDrive/labour_force.csv")
monthly_labour_force

unique_countries_count = monthly_labour_force['ref_area.label'].nunique()
unique_countries_count

monthly_labour_force_filtered = monthly_labour_force[['ref_area.label','sex.label',
                                      'classif1.label','obs_value', 'time']]
monthly_labour_force_filtered

unique_classif1_labels = monthly_labour_force_filtered['classif1.label'].unique()
print(unique_classif1_labels)

filtered_labour_force = monthly_labour_force_filtered[
    monthly_labour_force_filtered['classif1.label'].isin(['Age (Youth, adults): 25+', 'Age (Youth, adults): 15-24'])
]
filtered_labour_force

filtered_labour_force['sex.label'] = filtered_labour_force['sex.label'].str.replace('Sex: ', '', regex=False)
filtered_labour_force['classif1.label'] = filtered_labour_force['classif1.label'].str.replace(r'Age \(.*?\): ', '', regex=True)

filtered_labour_force

filtered_labour_force.rename(columns={'ref_area.label': 'Country',
                              'sex.label':'Sex'	,'classif1.label':'Age',
                              'obs_value':'Value'}, inplace=True)

filtered_labour_force['Year'] = filtered_labour_force['time'].str[:4]
filtered_labour_force['Month'] = filtered_labour_force['time'].str[5:]

filtered_labour_force.drop(columns=['time'], inplace=True)
filtered_labour_force

age_categories = filtered_labour_force['Age'].unique()
age_categories

unique_countries_count = filtered_labour_force['Country'].nunique()
unique_countries_count

age_categories = filtered_labour_force['Age'].unique()
age_categories

"""## Unemployment rate by month"""

ur_monthly = pd.read_csv("/content/drive/MyDrive/ur_montly_th.csv")
ur_monthly

unique_countries_count = ur_monthly['ref_area.label'].nunique()
unique_countries_count

monthly_ur_filtered = ur_monthly[['ref_area.label','sex.label',
                                      'classif1.label','obs_value', 'time']]
monthly_ur_filtered

filtered_ur = monthly_ur_filtered[
    monthly_ur_filtered['classif1.label'].isin(['Age (Youth, adults): 25+', 'Age (Youth, adults): 15-24'])
]
filtered_ur

filtered_ur['sex.label'] = filtered_ur['sex.label'].str.replace('Sex: ', '', regex=False)
filtered_ur['classif1.label'] = filtered_ur['classif1.label'].str.replace(r'Age \(.*?\): ', '', regex=True)

filtered_ur

filtered_ur.rename(columns={'ref_area.label': 'Country',
                              'sex.label':'Sex'	,'classif1.label':'Age',
                              'obs_value':'Value'}, inplace=True)

filtered_ur['Year'] = filtered_ur['time'].str[:4]
filtered_ur['Month'] = filtered_ur['time'].str[5:]

filtered_ur.drop(columns=['time'], inplace=True)
filtered_ur

age_categories = filtered_ur['Age'].unique()
age_categories

# categories_to_remove = ['15+', '15-64', 'Total', '25-54', '55-64', '65+',
#        '25-34', '35-44', '45-54', '15-19', '20-24', '25-29', '30-34',
#        '35-39', '40-44', '45-49', '50-54', '55-59', '60-64']
# monthly_ur_filtered = monthly_ur_filtered[~monthly_ur_filtered['Age'].isin(categories_to_remove)]
# monthly_ur_filtered

filtered_labour_force

filtered_ur

merged_df = pd.merge(filtered_labour_force, filtered_ur,
                     on=['Country', 'Sex', 'Age', 'Year', 'Month'],
                     suffixes=('_Labour', '_Unemployed'))

merged_df['Unemployment Rate (%)'] = (merged_df['Value_Unemployed'] / merged_df['Value_Labour'])

result_df = merged_df[['Country', 'Sex', 'Age', 'Year', 'Month', 'Unemployment Rate (%)']]
result_df

result_df = result_df[result_df['Country'] != "Taiwan, China"]

result_df['Country'] = result_df['Country'].replace("Hong Kong, China", "China")

result_df

unique_countries_count = filtered_labour_force['Country'].nunique()
unique_countries_count

filtered_labour_force

import plotly
import plotly.express as px

fig = px.choropleth(result_df,
                    locations='Country',
                    locationmode='country names',
                    color='Unemployment Rate (%)',
                    hover_name='Country',
                    color_continuous_scale='Viridis',
                    title='Global Population Distribution in 2022')


fig.update_layout(geo=dict(showframe=False, showcoastlines=False))

fig.show()

"""## OECD"""

test = pd.read_csv('/content/drive/MyDrive/oecd.csv')
test.info()

filtered_df = test[['Age','Sex', 'Reference area','OBS_VALUE','TIME_PERIOD']]
filtered_df

df_filtered = filtered_df[filtered_df['Age'].isin(['25 years or over', 'From 15 to 24 years'])]


df_filtered['Age'] = df_filtered['Age'].replace({
    '25 years or over': '25+',
    'From 15 to 24 years': '15-24'
})

df_filtered

df_filtered.rename(columns={'Reference area': 'Country',
                              'OBS_VALUE':'Unemployment Rate (%)'}, inplace=True)
df_filtered

df_filtered[['Year', 'Month']] = df_filtered['TIME_PERIOD'].str.split('-', expand=True)

df_filtered = df_filtered.drop(columns=['TIME_PERIOD'])
df_filtered

df_filtered['Unemployment Rate (%)'] = df_filtered['Unemployment Rate (%)'] / 100

result_df

combined_df = pd.concat([df_filtered, result_df], ignore_index=True)

combined_df

combined_df = combined_df[combined_df['Country'] != "Russian Federation"]

unique_countries_count = combined_df['Country'].nunique()
unique_countries_count

import plotly
import plotly.express as px

fig = px.choropleth(combined_df,
                    locations='Country',
                    locationmode='country names',
                    color='Unemployment Rate (%)',
                    hover_name='Country',
                    color_continuous_scale='Viridis',
                    title='Global Population Distribution in 2022')


fig.update_layout(geo=dict(showframe=False, showcoastlines=False))

fig.show()

"""#Visualization"""

df_balanced

import plotly
import plotly.express as px

fig = px.choropleth(df_balanced,
                    locations='Country',
                    locationmode='country names',
                    color='2022',
                    hover_name='Country',
                    color_continuous_scale='Viridis',
                    title='Global Population Distribution in 2022')


fig.update_layout(geo=dict(showframe=False, showcoastlines=False))

fig.show()

import folium
import pandas as pd

data = df_balanced
data_2020 = data[(data['Sex'] == 'Total') & (data['2023'].notna())]

m = folium.Map(location=[20, 0], zoom_start=2, tiles='cartodbpositron')

folium.Choropleth(
    geo_data='https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json',
    data=data_2020,
    columns=['Country', '2020'],
    key_on='feature.properties.name',
    fill_color='YlGnBu',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='Indicator 2020'
).add_to(m)


m.save('choropleth_map.html')
m

for year in range(2014, 2025):
    plt.figure(figsize=(10, 5))
    sns.histplot(df_balanced[str(year)], bins=30, kde=True)
    plt.title(f'Гістограма для {year}')
    plt.xlabel('Значення')
    plt.ylabel('Частота')
    plt.show()

plt.figure(figsize=(10, 5))
sns.countplot(x='Age', data=df_balanced)
plt.title('Розподіл за віком')
plt.xlabel('Вік')
plt.ylabel('Кількість')
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(x='Continent', y='2018', data=df_balanced)
plt.title('Розподіл значень за 2014 роком між континентами')
plt.xlabel('Континент')
plt.ylabel('Значення')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='Sex', y='2014', data=df_balanced)
plt.title('Розподіл значень за 2014 роком за статтю')
plt.xlabel('Стать')
plt.ylabel('2014')
plt.show()

sns.pairplot(df_balanced, hue='Continent', diag_kind='kde', markers='o')
plt.suptitle('Парний графік змінних у датасеті', y=1.02)
plt.show()

sns.pairplot(df_balanced, hue='Sex', diag_kind='kde', markers='o')
plt.suptitle('Парний графік змінних у датасеті', y=1.02)
plt.show()

df_ukraine = df_balanced[df_balanced['Country'] == 'Ukraine']
values = df_ukraine[numeric].mean()

plt.figure(figsize=(10, 6))
plt.plot(numeric, values, marker='o', linestyle='-', color='b')
plt.title('Зміни показників для України по роках', fontsize=16)
plt.xlabel('Рік', fontsize=14)
plt.ylabel('Значення', fontsize=14)
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

continents = df_balanced['Continent'].unique()

for continent in continents:
    df_continent = df_balanced[df_balanced['Continent'] == continent]
    values = df_continent[numeric].mean()

    plt.figure(figsize=(10, 6))
    plt.plot(numeric, values, marker='o', linestyle='-', color='r')
    plt.title(f'Зміни показників для {continent} по роках', fontsize=16)
    plt.xlabel('Рік', fontsize=14)
    plt.ylabel('Значення', fontsize=14)
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.show()

sex_counts = df_balanced['Sex'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(sex_counts, labels=sex_counts.index, autopct='%1.1f%%', startangle=90, colors=['#ff9999','#66b3ff','#99ff99'])
plt.title('Розподіл за статтю', fontsize=16)

plt.axis('equal')
plt.show()

cont_counts = df_balanced['Continent'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(cont_counts, labels=cont_counts.index, autopct='%1.1f%%', startangle=90, colors=['#ff9999','#66b3ff','#99ff99'])
plt.title('Розподіл за континентом', fontsize=16)

plt.axis('equal')
plt.show()

numeric = df_balanced.select_dtypes(include='number').columns
correlation_matrix = df_balanced[numeric].corr()

plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

sns.boxplot(x='Continent', y='2020', data=df_balanced)
plt.title('Розподіл показників за континентами у 2020 році')
plt.show()

df_balanced

data = pd.merge(combined_df, countries_continent, on="Country", how="left")

data

data['Date'] = pd.to_datetime(data['Year'].astype(str) + '-' + data['Month'].astype(str), format='%Y-%m')

plt.figure(figsize=(10, 6))
sns.histplot(data['Unemployment Rate (%)'], bins=15, kde=True, color='blue')
plt.title('Distribution of Unemployment Rate (%)')
plt.xlabel('Unemployment Rate (%)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(x='Age', y='Unemployment Rate (%)', hue='Sex', data=data)
plt.title('Unemployment Rate by Age Group and Sex')
plt.xlabel('Age Group')
plt.ylabel('Unemployment Rate (%)')
plt.legend(title='Sex')
plt.show()

plt.figure(figsize=(10, 6))
continent_avg = data.groupby('Continent')['Unemployment Rate (%)'].mean().reset_index()
sns.barplot(data=continent_avg, x='Continent', y='Unemployment Rate (%)', palette='viridis')
plt.title('Average Unemployment Rate by Continent')
plt.xlabel('Continent')
plt.ylabel('Average Unemployment Rate (%)')
plt.show()

plt.figure(figsize=(12, 6))
yearly_avg = data.groupby('Year')['Unemployment Rate (%)'].mean().reset_index()
sns.lineplot(data=yearly_avg, x='Year', y='Unemployment Rate (%)', marker='o')
plt.title('Yearly Trend of Unemployment Rate')
plt.xlabel('Year')
plt.ylabel('Average Unemployment Rate (%)')
plt.show()

data['Month'] = data['Date'].dt.month
plt.figure(figsize=(12, 6))
sns.boxplot(data=data, x='Month', y='Unemployment Rate (%)', palette='coolwarm')
plt.title('Seasonal Analysis: Monthly Unemployment Rate')
plt.xlabel('Month')
plt.ylabel('Unemployment Rate (%)')
plt.show()

plt.figure(figsize=(12, 6))
sns.lineplot(data=data, x='Year', y='Unemployment Rate (%)', hue='Continent', marker='o', palette="Set2")
plt.title('Unemployment Rate Trends by Continent', fontsize=16)
plt.xlabel('Year', fontsize=14)
plt.ylabel('Unemployment Rate (%)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title='Continent', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()

data_2014 = data[data['Year'] == '2014']

plt.figure(figsize=(12, 6))
sns.boxplot(data=data_2014, x='Continent', y='Unemployment Rate (%)', palette="coolwarm")

plt.title('Distribution of Unemployment Rates by Continent (2019)', fontsize=16)
plt.xlabel('Continent', fontsize=14)
plt.ylabel('Unemployment Rate (%)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()

age_group_avg = data.groupby('Age')['Unemployment Rate (%)'].mean().sort_values()

plt.figure(figsize=(10, 6))
age_group_avg.plot(kind='bar', color='skyblue', edgecolor='black')
plt.title('Average Unemployment Rate by Age Group', fontsize=16)
plt.xlabel('Age Group', fontsize=14)
plt.ylabel('Unemployment Rate (%)', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

plt.figure(figsize=(14, 8))
sns.boxplot(data=data[data['Continent'] == 'Europe'], x='Country', y='Unemployment Rate (%)', palette='viridis')
plt.title('Unemployment Rates by Country in Europe', fontsize=16)
plt.xlabel('Country', fontsize=14)
plt.ylabel('Unemployment Rate (%)', fontsize=14)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()